package query

import (
	"go.bilus.io/fencer/feature"
)

// ResultKey is a key generated by a mapper, associated with a feature.
type ResultKey interface{}

// ResultEntry is a list of features associated with a result key with
// metadata user code can use for caching etc.
type ResultEntry struct {
	Features []feature.Feature
	Meta     interface{}
}

// Result is a map of keys and the corresponding entries containing a query result.
type Result struct {
	entries map[ResultKey]*ResultEntry
}

// UpdateFunc is a callback passed to Result.Update.
type UpdateFunc func(entry *ResultEntry) error

// Update is a method for updating result for a given key.
func (result *Result) Update(key ResultKey, f UpdateFunc) error {
	m := result.entries
	entry, exists := m[key]
	if !exists {
		entry = &ResultEntry{}
		m[key] = entry
	}
	return f(entry)
}

func (result *Result) distinct() []feature.Feature {
	features := make([]feature.Feature, 0)
	matched := make(map[feature.Key]struct{})
	for _, entry := range result.entries {
		for _, feature := range entry.Features {
			key := feature.Key()
			_, isMatched := matched[key]
			if !isMatched {
				features = append(features, feature)
				matched[key] = struct{}{}
			}
		}
	}
	return features
}
